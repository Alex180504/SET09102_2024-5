// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SET09102_2024_5.Data;

#nullable disable

namespace Migrations.Migrations
{
    [DbContext(typeof(SensorMonitoringContext))]
    partial class SensorMonitoringContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("SET09102_2024_5.Models.Configuration", b =>
                {
                    b.Property<int>("SensorId")
                        .HasColumnType("int")
                        .HasColumnName("sensor_id");

                    b.Property<float?>("Altitude")
                        .HasColumnType("float")
                        .HasColumnName("altitude");

                    b.Property<float?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<float?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<float?>("MaxThreshold")
                        .HasColumnType("float")
                        .HasColumnName("max_threshold");

                    b.Property<int?>("MeasurementFrequency")
                        .HasColumnType("int")
                        .HasColumnName("measurement_frequency");

                    b.Property<float?>("MinThreshold")
                        .HasColumnType("float")
                        .HasColumnName("min_threshold");

                    b.Property<int?>("Orientation")
                        .HasColumnType("int")
                        .HasColumnName("orientation");

                    b.HasKey("SensorId");

                    b.ToTable("configuration", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("incident_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IncidentId"));

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("resolved_date");

                    b.Property<string>("ResponderComments")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("responder_comments");

                    b.Property<int?>("ResponderId")
                        .HasColumnType("int")
                        .HasColumnName("responder_id");

                    b.HasKey("IncidentId");

                    b.HasIndex("ResponderId");

                    b.ToTable("incident", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.IncidentMeasurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_id");

                    b.Property<int>("IncidentId")
                        .HasColumnType("int")
                        .HasColumnName("incident_id");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("MeasurementId", "IncidentId");

                    b.HasIndex("IncidentId");

                    b.ToTable("incident_measurement", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("maintenance_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MaintenanceId"));

                    b.Property<string>("MaintainerComments")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("maintainer_comments");

                    b.Property<int>("MaintainerId")
                        .HasColumnType("int")
                        .HasColumnName("maintainer_id");

                    b.Property<DateTime?>("MaintenanceDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("maintenance_date");

                    b.Property<int>("SensorId")
                        .HasColumnType("int")
                        .HasColumnName("sensor_id");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("MaintainerId");

                    b.HasIndex("SensorId");

                    b.ToTable("maintenance", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Measurand", b =>
                {
                    b.Property<int>("MeasurandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("measurand_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MeasurandId"));

                    b.Property<string>("QuantityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("quantity_name");

                    b.Property<string>("QuantityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("quantity_type");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("symbol");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit");

                    b.HasKey("MeasurandId");

                    b.ToTable("measurand", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Measurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("measurement_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MeasurementId"));

                    b.Property<int?>("MeasurandId")
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnType("int")
                        .HasColumnName("sensor_id");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<float?>("Value")
                        .HasColumnType("float")
                        .HasColumnName("value");

                    b.HasKey("MeasurementId");

                    b.HasIndex("MeasurandId");

                    b.HasIndex("SensorId");

                    b.ToTable("measurement", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sensor_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SensorId"));

                    b.Property<DateTime?>("DeploymentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deployment_date");

                    b.Property<int>("MeasurandId")
                        .HasColumnType("int")
                        .HasColumnName("measurand_id");

                    b.Property<string>("SensorType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sensor_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("SensorId");

                    b.HasIndex("MeasurandId");

                    b.ToTable("sensor", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.SensorFirmware", b =>
                {
                    b.Property<int>("SensorId")
                        .HasColumnType("int")
                        .HasColumnName("sensor_id");

                    b.Property<string>("FirmwareVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firmware_version");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_update_date");

                    b.HasKey("SensorId");

                    b.ToTable("sensor_firmware", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_salt");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Configuration", b =>
                {
                    b.HasOne("SET09102_2024_5.Models.Sensor", "Sensor")
                        .WithOne("Configuration")
                        .HasForeignKey("SET09102_2024_5.Models.Configuration", "SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Incident", b =>
                {
                    b.HasOne("SET09102_2024_5.Models.User", "Responder")
                        .WithMany("RespondedIncidents")
                        .HasForeignKey("ResponderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Responder");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.IncidentMeasurement", b =>
                {
                    b.HasOne("SET09102_2024_5.Models.Incident", "Incident")
                        .WithMany("IncidentMeasurements")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SET09102_2024_5.Models.Measurement", "Measurement")
                        .WithMany("IncidentMeasurements")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Maintenance", b =>
                {
                    b.HasOne("SET09102_2024_5.Models.User", "Maintainer")
                        .WithMany("Maintenances")
                        .HasForeignKey("MaintainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SET09102_2024_5.Models.Sensor", "Sensor")
                        .WithMany("Maintenances")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Maintainer");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Measurement", b =>
                {
                    b.HasOne("SET09102_2024_5.Models.Measurand", null)
                        .WithMany("Measurements")
                        .HasForeignKey("MeasurandId");

                    b.HasOne("SET09102_2024_5.Models.Sensor", "Sensor")
                        .WithMany("Measurements")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Sensor", b =>
                {
                    b.HasOne("SET09102_2024_5.Models.Measurand", "Measurand")
                        .WithMany("Sensors")
                        .HasForeignKey("MeasurandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measurand");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.SensorFirmware", b =>
                {
                    b.HasOne("SET09102_2024_5.Models.Sensor", "Sensor")
                        .WithOne("Firmware")
                        .HasForeignKey("SET09102_2024_5.Models.SensorFirmware", "SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.User", b =>
                {
                    b.HasOne("SET09102_2024_5.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Incident", b =>
                {
                    b.Navigation("IncidentMeasurements");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Measurand", b =>
                {
                    b.Navigation("Measurements");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Measurement", b =>
                {
                    b.Navigation("IncidentMeasurements");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.Sensor", b =>
                {
                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("Firmware")
                        .IsRequired();

                    b.Navigation("Maintenances");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("SET09102_2024_5.Models.User", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("RespondedIncidents");
                });
#pragma warning restore 612, 618
        }
    }
}
